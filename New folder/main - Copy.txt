# Import the random library to use for the dice later
import random
import os  # Import OS module for system information
import platform  # Import platform module for Python version information

# Put all the functions into another file and import them
import functions
from functions import print_header, print_section, print_game_text, print_important
from hero import Hero
from monster import Monster  # Import the Monster class
# Import the monster type system
from monster_types import generate_monster_types, TypedMonster, ElementalMonster, UndeadMonster, MechanicalMonster, MythicalMonster

# Print Python version information
print_header("MONSTER COMBAT GAME")
print_game_text(f"Python Version: {platform.python_version()}")
print_game_text(f"Python Implementation: {platform.python_implementation()}")

# Print operating system information
print_section("System Information")
print_game_text(f"Game running on operating system: {os.name}")
if os.name == 'nt':
    print_game_text("This is a Windows system")
elif os.name == 'posix':
    print_game_text("This is a Unix/Linux/Mac OS system")
else:
    print_game_text(f"This is an unknown operating system type: {os.name}")

game_score = 0

# Define two Dice
small_dice_options = list(range(1, 7))
big_dice_options = list(range(1, 21))

# Define the Weapons
weapons = ["Fist", "Knife", "Club", "Gun", "Bomb", "Nuclear Bomb"]

# Define the Loot
loot_options = ["Health Potion", "Poison Potion", "Secret Note", "Leather Boots", "Flimsy Gloves"]
belt = []

# Define the Monster's Powers
monster_powers = {
    "Fire Magic": 2,
    "Freeze Time": 4,
    "Super Hearing": 6
}

# Define the number of stars to award the player
num_stars = 0

# Loop to get valid input for Hero and Monster's Combat Strength
i = 0
input_invalid = True

print_section("Character Setup")
while input_invalid and i in range(5):
    print("\n")
    print_game_text("Enter your combat Strength (1-6): ")
    combat_strength_input = input("    > ")
    print_game_text("Enter the monster's combat Strength (1-6): ")
    monster_strength_input = input("    > ")

    # Validate input: Check if the string inputted is numeric
    if (not combat_strength_input.isnumeric()) or (not monster_strength_input.isnumeric()):
        # If one of the inputs are invalid, print error message and halt
        print_important("One or more invalid inputs. Player needs to enter integer numbers for Combat Strength!")
        i = i + 1
        continue

    # Note: Now safe to cast combat_strength to integer
    # Validate input: Check if the string inputted
    elif (int(combat_strength_input) not in range(1, 7)) or (int(monster_strength_input)) not in range(1, 7):
        print_important("Enter a valid integer between 1 and 6 only!")
        i = i + 1
        continue

    else:
        input_invalid = False
        break

if not input_invalid:
    input_invalid = False
    hero_strength = int(combat_strength_input)
    monster_strength = int(monster_strength_input)

    # Roll for weapon
    print_section("Weapon Selection")
    print_game_text("Roll the dice for your weapon (Press enter)")
    input("    > ")
    ascii_image5 = """
              , %               .           
   *      @./  #         @  &.(         
  @        /@   (      ,    @       # @ 
  @        ..@#% @     @&*#@(         % 
   &   (  @    (   / /   *    @  .   /  
     @ % #         /   .       @ ( @    
                 %   .@*                
               #         .              
             /     # @   *              
                 ,     %                
            @&@           @&@
            """
    print(ascii_image5)
    weapon_roll = random.choice(small_dice_options)

    # Limit the combat strength to 6
    hero_strength = min(6, (hero_strength + weapon_roll))
    print_important(f"The hero's weapon is {weapons[weapon_roll - 1]}")

    # Create hero and monster objects
    hero = Hero()
    hero.combat_strength = hero_strength
    
    # Use dynamic monster type system instead of basic Monster
    # Generate a monster using list comprehension (in monster_types module)
    monster = generate_monster_types()
    monster.combat_strength = monster_strength
    
    # Lab 06 - Question 5b
    functions.adjust_combat_strength(hero, monster)

    # Weapon Roll Analysis
    print_section("Weapon Analysis")
    print_game_text("Analyze the Weapon roll (Press enter)")
    input("    > ")
    if weapon_roll <= 2:
        print_game_text("--- You rolled a weak weapon, friend")
    elif weapon_roll <= 4:
        print_game_text("--- Your weapon is meh")
    else:
        print_game_text("--- Nice weapon, friend!")

    # If the weapon rolled is not a Fist, print out "Thank goodness you didn't roll the Fist..."
    if weapons[weapon_roll - 1] != "Fist":
        print_game_text("--- Thank goodness you didn't roll the Fist...")

    # Hero's health points are set in the constructor
    print_section("Health Points")
    print_game_text("Roll the dice for your health points (Press enter)")
    input("    > ")
    print_important(f"Player rolled {hero.health_points} health points")

    # Monster's health points are set in the constructor
    print_game_text("Roll the dice for the monster's health points (Press enter)")
    input("    > ")
    print_important(f"Monster rolled {monster.health_points} health points")

    # Collect Loot
    print_section("Treasure Hunt")
    print_game_text("!!You find a loot bag!! You look inside to find 2 items:")
    print_game_text("Roll for first item (enter)")
    input("    > ")

    # Collect Loot First time
    loot_options, belt = functions.collect_loot(loot_options, belt)

    print_game_text("Roll for second item (Press enter)")
    input("    > ")

    # Collect Loot Second time
    loot_options, belt = functions.collect_loot(loot_options, belt)

    print_game_text("You're super neat, so you organize your belt alphabetically:")
    belt.sort()
    print_important(f"Your belt: {belt}")

    # Use Loot with hero object
    belt, hero_hp = functions.use_loot(belt, hero)
    hero.health_points = hero_hp

    print_section("Character Status")
    print_game_text("Analyze the roll (Press enter)")
    input("    > ")
    # Compare Player vs Monster's strength
    print_game_text(f"--- You are matched in strength: {hero.combat_strength == monster.combat_strength}")

    # Check the Player's overall strength and health
    print_game_text(f"--- You have a strong player: {(hero.combat_strength + hero.health_points) >= 15}")

    # Roll for the monster's power
    print_section("Monster Magic")
    print_game_text("Roll for Monster's Magic Power (Press enter)")
    input("    > ")
    ascii_image4 = """
                @%   @                      
         @     @                        
             &                          
      @      .                          

     @       @                    @     
              @                  @      
      @         @              @  @     
       @            ,@@@@@@@     @      
         @                     @        
            @               @           
                 @@@@@@@                

                                      """
    print(ascii_image4)
    power_roll = random.choice(["Fire Magic", "Freeze Time", "Super Hearing"])

    # Increase the monster's combat strength by its power
    monster.combat_strength += min(6, monster_powers[power_roll])
    print_important(f"The monster's combat strength is now {monster.combat_strength} using the {power_roll} magic power")
    
    # Select a random environment for the battle
    combat_environment = functions.select_environment()
    
    # Regenerate the monster based on the environment
    monster = generate_monster_types(environment=combat_environment)
    monster.combat_strength = monster_strength + min(6, monster_powers[power_roll])  # Apply original monster strength + power
    
    # Display monster type information
    if hasattr(monster, 'monster_type'):
        print_important(f"A {monster.monster_type} appears before you!")
        print_game_text(f"{monster.get_description()}")
        
        # Show weapon effectiveness using list comprehension with nested conditionals
        print_section("Weapon Effectiveness")
        weapon_effectiveness = [
            f"{weapon} is " + 
            ("EFFECTIVE against" if weapon in monster.weaknesses else 
             "WEAK against" if weapon in monster.strengths else 
             "NEUTRAL against") + 
            f" this monster!"
            for weapon in weapons
        ]
        
        # Print the effectiveness information for the player's weapon
        current_weapon = weapons[min(5, weapon_roll - 1)]
        print_important(f"Your weapon: {current_weapon}")
        for info in [info for info in weapon_effectiveness if current_weapon in info]:
            print_game_text(info)
    
    # Apply environment bonus for monster if applicable
    if hasattr(monster, 'environment_bonus'):
        bonus = monster.environment_bonus(combat_environment)
        if bonus > 0:
            monster.combat_strength += bonus
            print_important(f"The {monster.monster_type} gains {bonus} combat strength in this {combat_environment}!")

    # Lab Week 06 - Question 6
    print_section("Dream Levels")
    num_dream_lvls = -1  # Initialize the number of dream levels
    while (num_dream_lvls < 0 or num_dream_lvls > 3):
        # Call Recursive function
        print_game_text("How many dream levels do you want to go down? (Enter a number 0-3)")
        user_input = input("    > ")
        
        try:
            # Try to convert the input to an integer
            num_dream_lvls = int(user_input)
            
            # Validate the integer is in range
            if num_dream_lvls < 0 or num_dream_lvls > 3:
                print_important("Number entered must be a whole number between 0-3 inclusive, try again")
                num_dream_lvls = -1  # Reset to continue the loop
            elif num_dream_lvls != 0:
                # If valid and not 0, apply the dream levels
                hero.health_points -= 1
                crazy_level = functions.inception_dream(num_dream_lvls)
                hero.combat_strength += crazy_level
                print_important(f"Combat strength: {hero.combat_strength}")
                print_important(f"Health points: {hero.health_points}")
        except ValueError:
            # Handle the case where the input is not a valid number
            print_important("Invalid input! Please enter a number between 0-3.")
            num_dream_lvls = -1  # Reset to continue the loop

    # Fight Sequence
    # Loop while the monster and the player are alive. Call fight sequence functions
    print_header("COMBAT BEGINS")
    print_important("You meet the monster. FIGHT!!")
    
    # Track the number of times each weapon is used for monster adaptation
    weapon_usage = {}
    
    while monster.health_points > 0 and hero.health_points > 0:
        # Fight Sequence
        print_section("Initiative Roll")
        print_game_text("Roll to see who strikes first (Press Enter)")
        input("    > ")
        attack_roll = random.choice(small_dice_options)
        if not (attack_roll % 2 == 0):
            print_important("You strike first!")
            print_game_text("Press enter to attack")
            input("    > ")
            
            # Get current weapon and track usage for adaptation
            current_weapon = weapons[min(5, hero.combat_strength - 1)]
            weapon_usage[current_weapon] = weapon_usage.get(current_weapon, 0) + 1
            
            # Show adaptation message if weapon has been used multiple times
            if weapon_usage[current_weapon] > 1 and hasattr(monster, 'adaptive') and monster.adaptive:
                print_important(f"The {monster.monster_type} seems to be studying your {current_weapon} attacks...")
            
            functions.hero_attacks(hero, monster)
            if monster.health_points == 0:
                num_stars = 3
            else:
                print_important("The monster strikes!")
                print_game_text("Press enter to continue")
                input("    > ")
                functions.monster_attacks(monster, hero)
                
                if hero.health_points == 0:
                    num_stars = 1
        else:
            print_important("The Monster strikes first!")
            print_game_text("Press enter to continue")
            input("    > ")
            functions.monster_attacks(monster, hero)
            if hero.health_points == 0:
                num_stars = 1
            else:
                print_important("Now you can strike back!")
                print_game_text("Press enter to attack")
                input("    > ")
                
                # Get current weapon and track usage for adaptation
                current_weapon = weapons[min(5, hero.combat_strength - 1)]
                weapon_usage[current_weapon] = weapon_usage.get(current_weapon, 0) + 1
                
                # Show adaptation message if weapon has been used multiple times
                if weapon_usage[current_weapon] > 1 and hasattr(monster, 'adaptive') and monster.adaptive:
                    print_important(f"The {monster.monster_type} seems to be studying your {current_weapon} attacks...")
                
                functions.hero_attacks(hero, monster)
                if monster.health_points == 0:
                    num_stars = 3

    if(monster.health_points <= 0):
        winner = "Hero"
    else:
        winner = "Monster"

    # Final Score Display "score print out is going in here"
    print_header("GAME RESULTS")
    tries = 0
    input_invalid = True
    while input_invalid and tries in range(5):
        print_game_text("Enter your Hero's name (in two words)")
        hero_name = input("    > ")
        name = hero_name.split()
        if len(name) != 2:
            print_important("Please enter a name with two parts (separated by a space)")
            tries += 1
        else:
            if not name[0].isalpha() or not name[1].isalpha():
                print_important("Please enter an alphabetical name")
                tries += 1
            else:
                short_name = name[0][0:2:1] + name[1][0:1:1]
                print_important(f"I'm going to call you {short_name} for short")
                input_invalid = False

    if not input_invalid:
        stars_display = "*" * num_stars
        print_important(f"Hero {short_name} gets <{stars_display}> stars")

        functions.save_game(winner, hero_name=short_name, num_stars=num_stars)


